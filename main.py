import sqlite3
import google.generativeai as genai
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder

API_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'
GEMINI_API_KEY = 'YOUR_GEMINI_API_KEY'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini 2.0 Flash
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel(
    model_name='gemini-2.0-flash',
    system_instruction=(
        "–¢—ã ‚Äî –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. "
        "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏. "
        "–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —à–∞–≥–∞—Ö."
    )
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

conn = sqlite3.connect('careerquest.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    interests TEXT,
    skills TEXT,
    work_preference TEXT
)''')
conn.commit()

class CareerForm(StatesGroup):
    interests = State()
    skills = State()
    work_preference = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = ReplyKeyboardBuilder().add(
    KeyboardButton(text="üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É"),
    KeyboardButton(text="üìö –û–±—É—á–µ–Ω–∏–µ –∏ –∫—É—Ä—Å—ã"),
    KeyboardButton(text="üíº –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã"),
    KeyboardButton(text="ü§î –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç")
).adjust(2).as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è. –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?",
        reply_markup=main_menu
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ Gemini 2.0 Flash
@dp.message(F.text == "üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É")
async def explore_career(message: Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤. –ß—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –¥–µ–ª–∞—Ç—å?")
    await state.set_state(CareerForm.interests)

@dp.message(CareerForm.interests)
async def process_interests(message: Message, state: FSMContext):
    await state.update_data(interests=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –∏–ª–∏ –Ω–∞–≤—ã–∫–∞—Ö:")
    await state.set_state(CareerForm.skills)

@dp.message(CareerForm.skills)
async def process_skills(message: Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await message.answer(
        "–ì–¥–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å?",
        reply_markup=ReplyKeyboardBuilder().add(
            KeyboardButton(text="–û—Ñ–∏—Å"),
            KeyboardButton(text="–£–¥–∞–ª–µ–Ω–Ω–æ"),
            KeyboardButton(text="–§—Ä–∏–ª–∞–Ω—Å")
        ).adjust(3).as_markup(resize_keyboard=True)
    )
    await state.set_state(CareerForm.work_preference)

@dp.message(CareerForm.work_preference)
async def process_work_preference(message: Message, state: FSMContext):
    await state.update_data(work_preference=message.text)
    data = await state.get_data()

    cursor.execute('''
        INSERT OR REPLACE INTO users (user_id, interests, skills, work_preference)
        VALUES (?, ?, ?, ?)
    ''', (message.from_user.id, data['interests'], data['skills'], data['work_preference']))
    conn.commit()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —á–µ—Ä–µ–∑ Gemini 2.0 Flash
    await message.answer("üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é Gemini 2.0 Flash...", reply_markup=main_menu)
    try:
        prompt = f"""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–º–µ–Ω–∏—Ç—å –∫–∞—Ä—å–µ—Ä—É. 
        –ò–Ω—Ç–µ—Ä–µ—Å—ã: {data['interests']}.
        –ù–∞–≤—ã–∫–∏: {data['skills']}.
        –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {data['work_preference']}.
        –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ —Å:
        - –û–ø–∏—Å–∞–Ω–∏–µ–º (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
        - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ (2-3 –ø—É–Ω–∫—Ç–∞)
        - –†–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ (—Å—Å—ã–ª–∫–∏)
        –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        response = model.generate_content(prompt)
        await message.answer(f"üåü –í–æ—Ç –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n{response.text}")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()
@dp.message(F.text == "üíº –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã")
async def job_search(message: Message):
    cursor.execute('SELECT skills, work_preference FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üîç")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ Gemini
    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–∞–≤—ã–∫–∞–º–∏: {user_data[0]}.
    –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ: {user_data[1]}.
    –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å:
    - –ù–∞–∑–≤–∞–Ω–∏–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    - –£—Ä–æ–≤–Ω–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã
    - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    - –°—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, hh.ru)
    """
    try:
        response = model.generate_content(prompt)
        await message.answer(f"üíº –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n{response.text}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        
@dp.message(F.text == "ü§î –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç")
async def get_advice(message: Message):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤
    prompt = """
    –î–∞–π 3 –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞.
    –§–æ—Ä–º–∞—Ç: —Å–æ–≤–µ—Ç + –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.
    –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
    """
    try:
        response = model.generate_content(prompt)
        await message.answer(f"üí° –°–æ–≤–µ—Ç—ã –æ—Ç Gemini:\n\n{response.text}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
@dp.message(F.text == "üìö –û–±—É—á–µ–Ω–∏–µ –∏ –∫—É—Ä—Å—ã")
async def education_courses(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    cursor.execute('SELECT interests, skills FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    
    if not user_data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É üîç")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É—Ä—Å–æ–≤ —á–µ—Ä–µ–∑ Gemini
    prompt = f"""
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ –æ–±–ª–∞—Å—Ç–∏: {user_data[0]}.
    –ï–≥–æ —Ç–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏: {user_data[1]}.
    –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–∞ —Å:
    - –ù–∞–∑–≤–∞–Ω–∏–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    - –°—Å—ã–ª–∫–æ–π
    - –ö—Ä–∞—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
    - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        response = model.generate_content(prompt)
        await message.answer(f"üéì –ö—É—Ä—Å—ã –¥–ª—è –≤–∞—Å:\n\n{response.text}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    dp.run_polling(bot)
